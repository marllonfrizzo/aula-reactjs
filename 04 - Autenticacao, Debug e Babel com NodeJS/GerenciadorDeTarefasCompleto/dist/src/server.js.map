{"version":3,"sources":["../../src/server.js"],"names":["debug","require","port","normalizePort","process","env","PORT","set","server","createServer","sync","force","NODE_ENV","then","listen","on","onError","onListening","catch","console","error","ex","val","parseInt","isNaN","syscall","bind","code","exit","addr","address"],"mappings":";;AAAA;;;;AAGA;;;;AACA;;;;AAHA,IAAMA,QAAQC,QAAQ,OAAR,EAAiB,aAAjB,CAAd;;AAKA;;;AAGA,IAAMC,OAAOC,cAAcC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,MAAlC,CAAb;AACA,cAAIC,GAAJ,CAAQ,MAAR,EAAgBL,IAAhB;;AAEA;;;AAGA,IAAMM,SAAS,eAAKC,YAAL,eAAf;;AAEA;;;AAGC,kBAAUC,IAAV,CAAe,EAAEC,OAAOP,QAAQC,GAAR,CAAYO,QAAZ,KAAyB,MAAlC,EAAf,EACEC,IADF,CACO,YAAM;AACZL,QAAOM,MAAP,CAAcZ,IAAd;AACAM,QAAOO,EAAP,CAAU,OAAV,EAAmBC,OAAnB;AACAR,QAAOO,EAAP,CAAU,WAAV,EAAuBE,WAAvB;AACC,CALF,EAKIC,KALJ,CAKU,cAAM;AACdC,SAAQC,KAAR,CAAcC,EAAd;AACA,CAPF;;AASD;;;AAGA,SAASlB,aAAT,CAAuBmB,GAAvB,EAA4B;AAC3B,KAAMpB,OAAOqB,SAASD,GAAT,EAAc,EAAd,CAAb;;AAEA,KAAIE,MAAMtB,IAAN,CAAJ,EAAiB;AAChB;AACA,SAAOoB,GAAP;AACA;;AAED,KAAIpB,QAAQ,CAAZ,EAAe;AACd;AACA,SAAOA,IAAP;AACA;;AAED,QAAO,KAAP;AACA;;AAED;;;AAGA,SAASc,OAAT,CAAiBI,KAAjB,EAAwB;AACvB,KAAIA,MAAMK,OAAN,KAAkB,QAAtB,EAAgC;AAC/B,QAAML,KAAN;AACA;;AAED,KAAMM,OAAO,OAAOxB,IAAP,KAAgB,QAAhB,GACV,UAAUA,IADA,GAEV,UAAUA,IAFb;;AAIA;AACA,SAAQkB,MAAMO,IAAd;AACC,OAAK,QAAL;AACCR,WAAQC,KAAR,CAAcM,OAAO,+BAArB;AACAtB,WAAQwB,IAAR,CAAa,CAAb;AACA;AACD,OAAK,YAAL;AACCT,WAAQC,KAAR,CAAcM,OAAO,oBAArB;AACAtB,WAAQwB,IAAR,CAAa,CAAb;AACA;AACD;AACC,SAAMR,KAAN;AAVF;AAYA;;AAED;;;AAGA,SAASH,WAAT,GAAuB;AACtB,KAAMY,OAAOrB,OAAOsB,OAAP,EAAb;AACA,KAAMJ,OAAO,OAAOG,IAAP,KAAgB,QAAhB,GACV,UAAUA,IADA,GAEV,UAAUA,KAAK3B,IAFlB;AAGAF,OAAM,kBAAkB0B,IAAxB;AACA","file":"server.js","sourcesContent":["import http from 'http';\nconst debug = require('debug')('http:server');\n\nimport app from '../src/app';\nimport { sequelize } from './models';\n\n/**\n * Get port from environment and store in Express.\n */\nconst port = normalizePort(process.env.PORT || '3001');\napp.set('port', port);\n\n/**\n * Create HTTP server.\n */\nconst server = http.createServer(app);\n\n/**\n * Listen on provided port, on all network interfaces.\n */\n sequelize.sync({ force: process.env.NODE_ENV === 'test' })\n \t.then(() => {\n\t\tserver.listen(port);\n\t\tserver.on('error', onError);\n\t\tserver.on('listening', onListening);\n\t }).catch(ex => {\n\t \tconsole.error(ex);\n\t })\n\n/**\n * Normalize a port into a number, string, or false.\n */\nfunction normalizePort(val) {\n\tconst port = parseInt(val, 10);\n\n\tif (isNaN(port)) {\n\t\t// named pipe\n\t\treturn val;\n\t}\n\n\tif (port >= 0) {\n\t\t// port number\n\t\treturn port;\n\t}\n\n\treturn false;\n}\n\n/**\n * Event listener for HTTP server \"error\" event.\n */\nfunction onError(error) {\n\tif (error.syscall !== 'listen') {\n\t\tthrow error;\n\t}\n\n\tconst bind = typeof port === 'string'\n\t\t? 'Pipe ' + port\n\t\t: 'Port ' + port;\n\n\t// handle specific listen errors with friendly messages\n\tswitch (error.code) {\n\t\tcase 'EACCES':\n\t\t\tconsole.error(bind + ' requires elevated privileges');\n\t\t\tprocess.exit(1);\n\t\t\tbreak;\n\t\tcase 'EADDRINUSE':\n\t\t\tconsole.error(bind + ' is already in use');\n\t\t\tprocess.exit(1);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow error;\n\t}\n}\n\n/**\n * Event listener for HTTP server \"listening\" event.\n */\nfunction onListening() {\n\tconst addr = server.address();\n\tconst bind = typeof addr === 'string'\n\t\t? 'pipe ' + addr\n\t\t: 'port ' + addr.port;\n\tdebug('Listening on ' + bind);\n}\n"]}