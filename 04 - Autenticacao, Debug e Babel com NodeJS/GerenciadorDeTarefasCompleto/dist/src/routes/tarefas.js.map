{"version":3,"sources":["../../../src/routes/tarefas.js"],"names":["Usuario","Tarefa","router","Router","module","exports","path","TAREFA_VALIDATOR","titulo","in","isLength","options","min","max","descricao","optional","post","request","response","usuarioId","decodedToken","id","tarefa","body","concluida","create","then","_tarefa","status","json","catch","console","error","ex","send","get","tarefaId","isInt","notEmpty","params","findById","include","model","where","put","save","tarefaAtualizada","delete","destroy","registrosAfetados","query","$like","findAll","attributes","tarefas","concluirTarefa","update"],"mappings":"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","file":"tarefas.js","sourcesContent":["import express from 'express';\n\nimport { checkTokenMiddleware } from '../utils/JWT'\nimport { createValidator } from '../utils/Validator'\nimport models, { sequelize } from '../models';\n\nconst { Usuario, Tarefa } = models;\n\nconst router = express.Router();\n\nmodule.exports = {\n    router,\n    path: '/tarefas'\n};\n\nconst TAREFA_VALIDATOR = {\n    titulo: {\n        in: 'body',\n        isLength: {\n            options: [{ min: 1, max: 200 }],\n        },\n    },\n    descricao: {\n        in: 'body',\n        optional: true\n    },\n};\n\nrouter.post('/',\n    createValidator(TAREFA_VALIDATOR),\n    checkTokenMiddleware,\n    (request, response) => {\n        const usuarioId = request.decodedToken.id;\n\n        const tarefa = {\n            titulo: request.body.titulo,\n            descricao: request.body.descricao,\n            usuarioId: usuarioId,\n            concluida: false,\n        }\n\n        Tarefa.create(tarefa)\n            .then((_tarefa) => {\n                response.status(201).json(_tarefa);\n            })\n            .catch(ex => {\n                console.error(ex);\n                response.status(400).send('Não foi possível incluir esta tarefa');\n            });\n    });\n\nrouter.get('/:tarefaId',\n    createValidator({\n        tarefaId: {\n            in: 'params',\n            isInt: true,\n            notEmpty: true,\n        }\n    }),\n    checkTokenMiddleware,\n    (request, response) => {\n        const tarefaId = request.params.tarefaId;\n        const usuarioId = request.decodedToken.id;\n\n        Tarefa.findById(tarefaId, {\n            include: [{\n                model: Usuario,\n                where: {\n                    id: usuarioId\n                }\n            }]\n        }).then(tarefa => {\n            if (tarefa) {\n                response.status(200).json(tarefa);\n            } else {\n                response.status(404).send('Tarefa não encontrada.');\n            }\n        }).catch(ex => {\n            console.error(ex);\n            response.status(400).send('Não foi possível consultar esta tarefa.');\n        });\n    });\n\nrouter.put('/:tarefaId',\n    createValidator({\n        ...TAREFA_VALIDATOR,\n        tarefaId: {\n            in: 'params',\n            isInt: true,\n            notEmpty: true,\n        }\n    }),\n    checkTokenMiddleware,\n    (request, response) => {\n        const tarefaId = request.params.tarefaId;\n        const usuarioId = request.decodedToken.id;\n\n        Tarefa.findById(tarefaId, {\n            where: {\n                usuarioId: usuarioId\n            }\n        }).then(tarefa => {\n            if (tarefa) {\n                tarefa.titulo = request.body.titulo;\n                tarefa.descricao = request.body.descricao;\n                return tarefa.save();\n            } else {\n                response.status(404).send('Tarefa não encontrada.');\n            }\n        }).then(tarefaAtualizada => {\n            if (tarefaAtualizada) {\n                response.status(200).json(tarefaAtualizada);\n            }\n        }).catch(ex => {\n            console.error(ex);\n            response.status(400).send('Não foi possível alterar os dados da tarefa.');\n        });\n    });\n\nrouter.delete('/:tarefaId',\n    createValidator({\n        tarefaId: {\n            in: 'params',\n            isInt: true,\n            notEmpty: true,\n        }\n    }),\n    checkTokenMiddleware,\n    (request, response) => {\n        const tarefaId = request.params.tarefaId;\n        const usuarioId = request.decodedToken.id;\n\n        Tarefa.destroy({\n            where: {\n                id: tarefaId,\n                usuarioId: usuarioId,\n            },\n        }).then(registrosAfetados => {\n            if (registrosAfetados > 0) {\n                response.status(204).send();\n            } else {\n                response.status(404).send('Tarefa não encontrada.');\n            }\n        }).catch(ex => {\n            console.error(ex);\n            response.status(400).send('Não foi possível remover esta tarefa.');\n        })\n    });\n\nrouter.get('/',\n    createValidator({\n        titulo: {\n            in: 'query',\n            optional: true\n        }\n    }),\n    checkTokenMiddleware,\n    (request, response) => {\n        const titulo = request.query.titulo;\n        const usuarioId = request.decodedToken.id;\n\n        let where = {\n            usuarioId: usuarioId,\n        }\n\n        if (titulo) {\n            where.titulo = {\n                $like: '%' + titulo + '%'\n            }\n        }\n\n        Tarefa.findAll({\n            attributes: ['id', 'titulo', 'concluida', 'createdAt'],\n            where: where\n        }).then(tarefas => {\n            response.status(200).json(tarefas);\n        }).catch(ex => {\n            console.error(ex);\n            response.status(400).send('Não foi possível consultar as tarefas.');\n        })\n    });\n\nrouter.delete('/concluida/:tarefaId',\n    createValidator({\n        tarefaId: {\n            in: 'params',\n            isInt: true,\n            notEmpty: true,\n        }\n    }),\n    checkTokenMiddleware,\n    (request, response) => {\n        const tarefaId = request.params.tarefaId;\n        return concluirTarefa(tarefaId, false, response);\n    });\n\nrouter.put('/concluida/:tarefaId',\n    createValidator({\n        tarefaId: {\n            in: 'params',\n            isInt: true,\n            notEmpty: true,\n        }\n    }),\n    checkTokenMiddleware,\n    (request, response) => {\n        const tarefaId = request.params.tarefaId;\n        return concluirTarefa(tarefaId, true, response);\n    });\n\nconst concluirTarefa = (tarefaId, concluida, response) => {\n    return Tarefa.update({\n        concluida: concluida,\n    }, {\n            where: {\n                id: tarefaId,\n            },\n        }\n    ).then(registrosAfetados => {\n        if (registrosAfetados > 0) {\n            response.status(204).send();\n        } else {\n            response.status(404).send('Tarefa não encontrada.');\n        }\n    }).catch(ex => {\n        console.error(ex);\n        response.status(400).send('Não foi possível remover esta tarefa.');\n    })\n}"]}