{"version":3,"sources":["../../../src/routes/usuarios.js"],"names":["Usuario","Tarefa","router","Router","module","exports","path","DATE_FORMAT","SALT_ROUNDS","USER_VALIDATOR","nome","in","notEmpty","isLength","options","min","max","email","isEmail","nascimento","isDate","errorMessage","senha","cpf","isCPF","post","request","response","usuario","body","toDate","hashSync","create","then","_usuario","get","plain","status","json","catch","console","error","ex","errors","length","type","field","send","usuarioId","isInt","params","usuarioIdToken","decodedToken","id","findById","include","model","attributes","required","put","save","usuarioAtualizado","findOne","where","compareSync","toString","token"],"mappings":";;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;AACA;;AACA;;;;;;IAEQA,O,oBAAAA,O;IAASC,M,oBAAAA,M;;;AAEjB,IAAMC,SAAS,kBAAQC,MAAR,EAAf;;AAEAC,OAAOC,OAAP,GAAiB;AACbH,kBADa;AAEbI,UAAM;AAFO,CAAjB;;AAKA,IAAMC,cAAc,YAApB;AACA,IAAMC,cAAc,EAApB,C,CAAwB;;AAExB,IAAMC,iBAAiB;AACnBC,UAAM;AACFC,YAAI,MADF;AAEFC,kBAAU,IAFR;AAGFC,kBAAU;AACNC,qBAAS,CAAC,EAAEC,KAAK,CAAP,EAAUC,KAAK,GAAf,EAAD;AADH;AAHR,KADa;AAQnBC,WAAO;AACHN,YAAI,MADD;AAEHC,kBAAU,IAFP;AAGHM,iBAAS,IAHN;AAIHL,kBAAU;AACNC,qBAAS,CAAC,EAAEE,KAAK,GAAP,EAAD;AADH;AAJP,KARY;AAgBnBG,gBAAY;AACRR,YAAI,MADI;AAERC,kBAAU,IAFF;AAGRQ,gBAAQ;AACJN,qBAASP,WADL;AAEJc,4DAA8Cd;AAF1C;AAHA,KAhBO;AAwBnBe,WAAO;AACHX,YAAI,MADD;AAEHC,kBAAU,IAFP;AAGHC,kBAAU;AACNC,qBAAS,CAAC,EAAEC,KAAK,CAAP,EAAUC,KAAK,CAAf,EAAD;AADH;AAHP,KAxBY;AA+BnBO,SAAK;AACDZ,YAAI,MADH;AAEDa,eAAO;AAFN;AA/Bc,CAAvB;;AAqCA;;;AAGAtB,OAAOuB,IAAP,CAAY,GAAZ,EACI,gCAAgBhB,cAAhB,CADJ,EAEI,UAACiB,OAAD,EAAUC,QAAV,EAAuB;AACnB,QAAMC,UAAU;AACZlB,cAAMgB,QAAQG,IAAR,CAAanB,IADP;AAEZO,eAAOS,QAAQG,IAAR,CAAaZ,KAFR;AAGZM,aAAKG,QAAQG,IAAR,CAAaN,GAHN;AAIZJ,oBAAY,sBAAOO,QAAQG,IAAR,CAAaV,UAApB,EAAgCZ,WAAhC,EAA6C,IAA7C,EAAmDuB,MAAnD,EAJA;AAKZR,eAAO,mBAAOS,QAAP,CAAgBL,QAAQG,IAAR,CAAaP,KAA7B,EAAoCd,WAApC,CALK,CAK4C;AAL5C,KAAhB;;AAQAR,YAAQgC,MAAR,CAAeJ,OAAf,EACKK,IADL,CACU,UAACC,QAAD,EAAc;AAChBA,mBAAWA,SAASC,GAAT,CAAa,EAAEC,OAAO,IAAT,EAAb,CAAX;AACA,eAAOF,SAASZ,KAAhB;AACAK,iBAASU,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0BJ,QAA1B;AACH,KALL,EAKOK,KALP,CAKa,cAAM;AACXC,gBAAQC,KAAR,CAAcC,EAAd;AACA,YAAIA,GAAGC,MAAH,CAAUC,MAAd,EAAsB;AAClB,gBAAIF,GAAGC,MAAH,CAAU,CAAV,EAAaE,IAAb,KAAsB,kBAA1B,EAA8C;AAC1ClB,yBAASU,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AACtBO,0BAAM,QADgB;AAEtBC,2BAAO;AAFe,iBAA1B;AAIA;AACH;AACJ;AACDnB,iBAASU,MAAT,CAAgB,GAAhB,EAAqBU,IAArB,CAA0B,qCAA1B;AACH,KAjBL;AAkBH,CA7BL;;AA+BA;;;AAGA7C,OAAOiC,GAAP,CAAW,aAAX,EACI,gCAAgB;AACZa,eAAW;AACPrC,YAAI,QADG;AAEPsC,eAAO,IAFA;AAGPrC,kBAAU;AAHH;AADC,CAAhB,CADJ,6BASI,UAACc,OAAD,EAAUC,QAAV,EAAuB;AACnB,QAAMqB,YAAYtB,QAAQwB,MAAR,CAAeF,SAAjC;AACA,QAAMG,iBAAiBzB,QAAQ0B,YAAR,CAAqBC,EAA5C;;AAEA;AACA,QAAIL,aAAaG,cAAjB,EAAiC;AAC7BxB,iBAASU,MAAT,CAAgB,GAAhB,EAAqBU,IAArB,CAA0B,0BAA1B;AACA;AACH;;AAED/C,YAAQsD,QAAR,CAAiBN,SAAjB,EAA4B;AACxBO,iBAAS,CAAC;AACNC,mBAAOvD,MADD;AAENwD,wBAAY,CAAC,IAAD,EAAO,QAAP,CAFN;AAGNC,sBAAU,KAHJ,CAGU;AAHV,SAAD;AADe,KAA5B,EAMGzB,IANH,CAMQ,mBAAW;AACf,YAAIL,OAAJ,EAAa;AACTD,qBAASU,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0BV,OAA1B;AACH,SAFD,MAEO;AACHD,qBAASU,MAAT,CAAgB,GAAhB,EAAqBU,IAArB,CAA0B,yBAA1B;AACH;AACJ,KAZD,EAYGR,KAZH,CAYS,cAAM;AACXC,gBAAQC,KAAR,CAAcC,EAAd;AACAf,iBAASU,MAAT,CAAgB,GAAhB,EAAqBU,IAArB,CAA0B,uCAA1B;AACH,KAfD;AAgBH,CAnCL;;AAqCA;;;AAGA7C,OAAOyD,GAAP,CAAW,aAAX,EACI,6CACOlD,cADP;AAEIuC,eAAW;AACPrC,YAAI,QADG;AAEPsC,eAAO,IAFA;AAGPrC,kBAAU;AAHH;AAFf,GADJ,6BAUI,UAACc,OAAD,EAAUC,QAAV,EAAuB;AACnB,QAAMqB,YAAYtB,QAAQwB,MAAR,CAAeF,SAAjC;AACA,QAAMG,iBAAiBzB,QAAQ0B,YAAR,CAAqBC,EAA5C;;AAEA;AACA,QAAIL,aAAaG,cAAjB,EAAiC;AAC7BxB,iBAASU,MAAT,CAAgB,GAAhB,EAAqBU,IAArB,CAA0B,0BAA1B;AACA;AACH;;AAED/C,YAAQsD,QAAR,CAAiBN,SAAjB,EACKf,IADL,CACU,mBAAW;AACb,YAAIL,OAAJ,EAAa;AACTA,oBAAQlB,IAAR,GAAegB,QAAQG,IAAR,CAAanB,IAA5B;AACAkB,oBAAQX,KAAR,GAAgBS,QAAQG,IAAR,CAAaZ,KAA7B;AACAW,oBAAQL,GAAR,GAAcG,QAAQG,IAAR,CAAaN,GAA3B;AACAK,oBAAQT,UAAR,GAAqB,sBAAOO,QAAQG,IAAR,CAAaV,UAApB,EAAgCZ,WAAhC,EAA6C,IAA7C,EAAmDuB,MAAnD,EAArB;AACAF,oBAAQN,KAAR,GAAgB,mBAAOS,QAAP,CAAgBL,QAAQG,IAAR,CAAaP,KAA7B,EAAoCd,WAApC,CAAhB,CALS,CAKwD;AACjE,mBAAOoB,QAAQgC,IAAR,EAAP;AACH,SAPD,MAOO;AACHjC,qBAASU,MAAT,CAAgB,GAAhB,EAAqBU,IAArB,CAA0B,yBAA1B;AACH;AACJ,KAZL,EAYOd,IAZP,CAYY,6BAAqB;AACzB,YAAI4B,iBAAJ,EAAuB;AACnB,gBAAM3B,WAAW2B,kBAAkB1B,GAAlB,CAAsB,EAAEC,OAAO,IAAT,EAAtB,CAAjB;AACA,mBAAOF,SAASZ,KAAhB;AACAK,qBAASU,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0BJ,QAA1B;AACH;AACJ,KAlBL,EAkBOK,KAlBP,CAkBa,cAAM;AACXC,gBAAQC,KAAR,CAAcC,EAAd;AACAf,iBAASU,MAAT,CAAgB,GAAhB,EAAqBU,IAArB,CAA0B,+CAA1B;AACH,KArBL;AAsBH,CA1CL;;AA4CA;;;AAGA7C,OAAOuB,IAAP,CAAY,QAAZ,EACI,gCAAgB;AACZR,WAAO;AACHN,YAAI,MADD;AAEHC,kBAAU,IAFP;AAGHM,iBAAS;AAHN,KADK;AAMZI,WAAO;AACHX,YAAI,MADD;AAEHC,kBAAU;AAFP;AANK,CAAhB,CADJ,EAYI,UAACc,OAAD,EAAUC,QAAV,EAAuB;AAAA,wBACMD,QAAQG,IADd;AAAA,QACXZ,KADW,iBACXA,KADW;AAAA,QACJK,KADI,iBACJA,KADI;;;AAGnBtB,YAAQ8D,OAAR,CAAgB;AACZL,oBAAY,EADA;AAEZM,eAAO;AACH9C,mBAAOA;AADJ;AAFK,KAAhB,EAKGgB,IALH,CAKQ,mBAAW;AACf,YAAIL,WAAW,mBAAOoC,WAAP,CAAmB1C,KAAnB,EAA0BM,QAAQN,KAAR,CAAc2C,QAAd,EAA1B,CAAf,EAAoE;AAChE,gBAAM/B,WAAWN,QAAQO,GAAR,CAAY,EAAEC,OAAO,IAAT,EAAZ,CAAjB;AACA,mBAAOF,SAASZ,KAAhB,CAFgE,CAEzC;AACvBK,qBAASU,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AACtB4B,uBAAO,wBAAchC,QAAd;AADe,aAA1B;AAGH,SAND,MAMO;AACHP,qBAASU,MAAT,CAAgB,GAAhB,EAAqBU,IAArB,CAA0B,4BAA1B;AACH;AACJ,KAfD,EAeGR,KAfH,CAeS,cAAM;AACXC,gBAAQC,KAAR,CAAcC,EAAd;AACAf,iBAASU,MAAT,CAAgB,GAAhB,EAAqBU,IAArB,CAA0B,mCAA1B;AACH,KAlBD;AAmBH,CAlCL","file":"usuarios.js","sourcesContent":["import express from 'express';\nimport moment from 'moment';\nimport bcrypt from 'bcryptjs';\n\nimport { generateToken, checkTokenMiddleware } from '../utils/JWT';\nimport { createValidator } from '../utils/Validator';\nimport models from '../models';\n\nconst { Usuario, Tarefa } = models;\n\nconst router = express.Router();\n\nmodule.exports = {\n    router,\n    path: '/usuarios'\n};\n\nconst DATE_FORMAT = 'YYYY-MM-DD';\nconst SALT_ROUNDS = 12; // quanto mais rounds, mais seguro e mais lento para criptografar a senha\n\nconst USER_VALIDATOR = {\n    nome: {\n        in: 'body',\n        notEmpty: true,\n        isLength: {\n            options: [{ min: 3, max: 200 }],\n        },\n    },\n    email: {\n        in: 'body',\n        notEmpty: true,\n        isEmail: true,\n        isLength: {\n            options: [{ max: 150 }],\n        },\n    },\n    nascimento: {\n        in: 'body',\n        notEmpty: true,\n        isDate: {\n            options: DATE_FORMAT,\n            errorMessage: `A data deve estar no formato ${DATE_FORMAT}`\n        }\n    },\n    senha: {\n        in: 'body',\n        notEmpty: true,\n        isLength: {\n            options: [{ min: 6, max: 8 }],\n        },\n    },\n    cpf: {\n        in: 'body',\n        isCPF: true\n    }\n};\n\n/**\n * Cadastro de usuário\n */\nrouter.post('/',\n    createValidator(USER_VALIDATOR),\n    (request, response) => {\n        const usuario = {\n            nome: request.body.nome,\n            email: request.body.email,\n            cpf: request.body.cpf,\n            nascimento: moment(request.body.nascimento, DATE_FORMAT, true).toDate(),\n            senha: bcrypt.hashSync(request.body.senha, SALT_ROUNDS) // criptografa a senha antes de salvar\n        };\n\n        Usuario.create(usuario)\n            .then((_usuario) => {\n                _usuario = _usuario.get({ plain: true });\n                delete _usuario.senha;\n                response.status(201).json(_usuario);\n            }).catch(ex => {\n                console.error(ex);\n                if (ex.errors.length) {\n                    if (ex.errors[0].type === 'unique violation') {\n                        response.status(412).json({\n                            type: 'unique',\n                            field: 'email'\n                        });\n                        return;\n                    }\n                }\n                response.status(400).send('Não foi possível inserir o usuário.');\n            });\n    });\n\n/**\n * Consulta de usuário\n */\nrouter.get('/:usuarioId',\n    createValidator({\n        usuarioId: {\n            in: 'params',\n            isInt: true,\n            notEmpty: true,\n        }\n    }),\n    checkTokenMiddleware,\n    (request, response) => {\n        const usuarioId = request.params.usuarioId;\n        const usuarioIdToken = request.decodedToken.id;\n\n        // Verifica se o ID do usuário logado é igual ao ID passado por parâmetro.\n        if (usuarioId != usuarioIdToken) {\n            response.status(401).send('Operação não autorizada.');\n            return;\n        }\n\n        Usuario.findById(usuarioId, {\n            include: [{\n                model: Tarefa,\n                attributes: ['id', 'titulo'],\n                required: false // true = inner join, false = left join\n            }]\n        }).then(usuario => {\n            if (usuario) {\n                response.status(200).json(usuario);\n            } else {\n                response.status(404).send('Usuário não encontrado.');\n            }\n        }).catch(ex => {\n            console.error(ex);\n            response.status(400).send('Não foi possível consultar o usuário.');\n        });\n    });\n\n/**\n* Alteração de usuário\n*/\nrouter.put('/:usuarioId',\n    createValidator({\n        ...USER_VALIDATOR,\n        usuarioId: {\n            in: 'params',\n            isInt: true,\n            notEmpty: true,\n        }\n    }),\n    checkTokenMiddleware,\n    (request, response) => {\n        const usuarioId = request.params.usuarioId;\n        const usuarioIdToken = request.decodedToken.id;\n\n        // Verifica se o ID do usuário logado é igual ao ID passado por parâmetro.\n        if (usuarioId != usuarioIdToken) {\n            response.status(401).send('Operação não autorizada.');\n            return;\n        }\n\n        Usuario.findById(usuarioId)\n            .then(usuario => {\n                if (usuario) {\n                    usuario.nome = request.body.nome;\n                    usuario.email = request.body.email;\n                    usuario.cpf = request.body.cpf;\n                    usuario.nascimento = moment(request.body.nascimento, DATE_FORMAT, true).toDate();\n                    usuario.senha = bcrypt.hashSync(request.body.senha, SALT_ROUNDS) // criptografa a senha antes de salvar\n                    return usuario.save();\n                } else {\n                    response.status(404).send('Usuário não encontrado.');\n                }\n            }).then(usuarioAtualizado => {\n                if (usuarioAtualizado) {\n                    const _usuario = usuarioAtualizado.get({ plain: true });\n                    delete _usuario.senha;\n                    response.status(200).json(_usuario);\n                }\n            }).catch(ex => {\n                console.error(ex);\n                response.status(400).send('Não foi possível alterar os dados do usuário.');\n            });\n    });\n\n/**\n* Login de usuários\n*/\nrouter.post('/login',\n    createValidator({\n        email: {\n            in: 'body',\n            notEmpty: true,\n            isEmail: true,\n        },\n        senha: {\n            in: 'body',\n            notEmpty: true\n        }\n    }),\n    (request, response) => {\n        const { email, senha } = request.body;\n\n        Usuario.findOne({\n            attributes: {},\n            where: {\n                email: email\n            }\n        }).then(usuario => {\n            if (usuario && bcrypt.compareSync(senha, usuario.senha.toString())) {\n                const _usuario = usuario.get({ plain: true });\n                delete _usuario.senha; // remove o atributo da senha do objeto\n                response.status(200).json({\n                    token: generateToken(_usuario)\n                })\n            } else {\n                response.status(401).send('Email ou senha incorretos.');\n            }\n        }).catch(ex => {\n            console.error(ex);\n            response.status(400).send('Não foi possível efetuar o login.');\n        })\n    });\n"]}